import os
import re
import threading
import time
from datetime import datetime, timedelta

import telebot
import gspread
import cv2
import numpy as np
from pyzbar.pyzbar import decode
from oauth2client.service_account import ServiceAccountCredentials
import schedule
import pytz
from flask import Flask

# ======= –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–∫–ª—é—á—ñ —Ç–∞ URL —Ç–∞–±–ª–∏—Ü—å) =======
from config import (
    TOKEN,
    GOOGLE_SHEETS_CREDENTIALS,  # —à–ª—è—Ö –¥–æ JSON –∑ –∫–ª—é—á–∞–º–∏ –¥–ª—è Google API
    GOOGLE_SHEET_URL,           # URL —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è TTN
    GOOGLE_SHEET_URL_USERS      # URL —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
)

# ======= Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è (UptimeRobot) =======
app = Flask(__name__)

@app.route('/')
def ping():
    return "OK", 200

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

# ======= –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—å =======
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_CREDENTIALS, scope)
client = gspread.authorize(creds)

# –¢–∞–±–ª–∏—Ü—è –¥–ª—è TTN (–¥–∞–Ω—ñ –ø—Ä–æ –ø–æ—Å–∏–ª–∫–∏)
sheet_ttn = client.open_by_url(GOOGLE_SHEET_URL)
worksheet_ttn = sheet_ttn.sheet1  # –ú–∞—î –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É

# –¢–∞–±–ª–∏—Ü—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
sheet_users = client.open_by_url(GOOGLE_SHEET_URL_USERS)
worksheet_users = sheet_users.sheet1  # –ó–∞–≥–æ–ª–æ–≤–∫–∏: Tg ID, –†–æ–ª—å, Tg –Ω—ñ–∫, –ß–∞—Å –¥–ª—è –∑–≤—ñ—Ç—É, –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–≤—ñ—Ç

# ======= –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram-–±–æ—Ç–∞ =======
bot = telebot.TeleBot(TOKEN)

# ======= –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (Google –¢–∞–±–ª–∏—Ü—è) =======

def get_all_users_data():
    data = {}
    rows = worksheet_users.get_all_values()  # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ ‚Äì –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for row in rows[1:]:
        if len(row) < 4:
            continue
        tg_id = row[0]
        role = row[1]
        username = row[2]
        report_time = row[3]
        last_sent = row[4] if len(row) >= 5 else ""
        data[tg_id] = {"role": role, "username": username, "time": report_time, "last_sent": last_sent}
    return data

def find_user_row(tg_id):
    rows = worksheet_users.get_all_values()
    for i, row in enumerate(rows, start=1):
        if row and row[0] == tg_id:
            return i
    return None

def update_user_data(tg_id, role, username, report_time, last_sent=""):
    row_index = find_user_row(tg_id)
    if row_index is None:
        next_row = len(worksheet_users.get_all_values()) + 1
        worksheet_users.update(f"A{next_row}:E{next_row}", [[tg_id, role, username, report_time, last_sent]])
    else:
        worksheet_users.update(f"A{row_index}:E{row_index}", [[tg_id, role, username, report_time, last_sent]])

def get_user_data(tg_id):
    row_index = find_user_row(tg_id)
    if row_index is None:
        return None, "", "", ""
    row = worksheet_users.row_values(row_index)
    role = row[1] if len(row) > 1 else None
    username = row[2] if len(row) > 2 else ""
    report_time = row[3] if len(row) > 3 else ""
    last_sent = row[4] if len(row) > 4 else ""
    return role, username, report_time, last_sent

# ======= –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∞–±–ª–∏—Ü–µ—é TTN =======

def add_ttn_to_sheet(ttn, username, chat_id):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        col_a = worksheet_ttn.col_values(1)
        next_row = len(col_a) + 1
        worksheet_ttn.update(f"A{next_row}:C{next_row}", [[ttn, now, username]])
        bot.send_message(chat_id, f"‚úÖ –¢–¢–ù `{ttn}` –¥–æ–¥–∞–Ω–æ!", parse_mode="Markdown")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –¢–¢–ù –¥–æ —Ç–∞–±–ª–∏—Ü—ñ!")
        print(e)

def check_ttn_in_sheet(chat_id, ttn):
    try:
        records = worksheet_ttn.get_all_values()
        if len(records) <= 1:
            bot.send_message(chat_id, "‚ùå –í –±–∞–∑—ñ –Ω–µ–º–∞—î –¢–¢–ù.")
            return
        for row in records[1:]:
            if row and len(row) >= 1 and row[0] == ttn:
                date_time = row[1] if len(row) > 1 else "–Ω–µ–≤—ñ–¥–æ–º–æ"
                bot.send_message(chat_id, f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–æ! –¢–¢–ù: `{ttn}`\nüïí –ß–∞—Å: {date_time}", parse_mode="Markdown")
                return
        bot.send_message(chat_id, f"‚ùå –¢–¢–ù `{ttn}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ!", parse_mode="Markdown")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏!")
        print(e)

def clear_ttn_sheet():
    try:
        records = worksheet_ttn.get_all_values()
        row_count = len(records)
        if row_count > 1:
            empty_data = [[""] * 3 for _ in range(row_count - 1)]
            worksheet_ttn.update(f"A2:C{row_count}", empty_data)
            print("TTN sheet cleared successfully.")
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ TTN:", e)

# –§—É–Ω–∫—Ü—ñ—è, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∞—Å –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º —Ç–∞ –æ—á–∏—â—É—î TTN, —è–∫—â–æ –Ω–∞—Å—Ç–∞–≤ 00:00
def run_clear_ttn_sheet_with_tz():
    tz_kiev = pytz.timezone("Europe/Kiev")
    now_kiev = datetime.now(tz_kiev)
    if now_kiev.strftime("%H:%M") == "13:25":
        clear_ttn_sheet()

# ======= –ö–æ–º–∞–Ω–¥–∏ Telegram-–±–æ—Ç–∞ =======

@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = str(message.chat.id)
    role, username, report_time, last_sent = get_user_data(chat_id)
    subscribe_info = (
        "\n\n–í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç, –≤–≤—ñ–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /subscribe <—á–∞—Å> "
        "(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /subscribe 22:00). –Ø–∫—â–æ —á–∞—Å –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äì –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 22:00. "
        "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è ‚Äì –∫–æ–º–∞–Ω–¥–æ—é /unsubscribe."
    )
    if role:
        bot.send_message(
            chat_id,
            f"üëã –í—ñ—Ç–∞—é! –í–∞—à–∞ —Ä–æ–ª—å: *{role}*.\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é:\n"
            "/Office - –û—Ñ—ñ—Å üìë\n"
            "/Cklad - –°–∫–ª–∞–¥ üì¶"
            f"{subscribe_info}",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(
            chat_id,
            "–¶–µ–π –±–æ—Ç —Å–ø—Ä–æ—â—É—î —Ä–æ–±–æ—Ç—É –∑ –¢–¢–ù.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å:\n"
            "/Office - –û—Ñ—ñ—Å üìë\n"
            "/Cklad - –°–∫–ª–∞–¥ üì¶"
            f"{subscribe_info}"
        )

@bot.message_handler(commands=["Office"])
def cmd_office(message):
    chat_id = str(message.chat.id)
    role, username, report_time, last_sent = get_user_data(chat_id)
    if not username:
        username = message.from_user.username or ""
    update_user_data(chat_id, "–û—Ñ—ñ—Å", username, report_time, last_sent)
    bot.send_message(chat_id, "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–ª—å: *–û—Ñ—ñ—Å*.\n\n–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –¢–¢–ù (–∫–æ–¥ –∞–±–æ —Ñ–æ—Ç–æ), –≤–æ–Ω–∏ –æ–±—Ä–æ–±–ª—è—Ç—å—Å—è.", parse_mode="Markdown")

@bot.message_handler(commands=["Cklad"])
def cmd_cklad(message):
    chat_id = str(message.chat.id)
    role, username, report_time, last_sent = get_user_data(chat_id)
    if not username:
        username = message.from_user.username or ""
    update_user_data(chat_id, "–°–∫–ª–∞–¥", username, report_time, last_sent)
    bot.send_message(chat_id, "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–ª—å: *–°–∫–ª–∞–¥*.\n\n–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –¢–¢–ù (–∫–æ–¥ –∞–±–æ —Ñ–æ—Ç–æ), –≤–æ–Ω–∏ –æ–±—Ä–æ–±–ª—è—Ç—å—Å—è.", parse_mode="Markdown")

@bot.message_handler(commands=["subscribe"])
def cmd_subscribe(message):
    chat_id = str(message.chat.id)
    args = message.text.split()
    sub_time = "22:00"
    if len(args) > 1:
        candidate = args[1]
        if re.match(r'^\d{1,2}:\d{2}$', candidate):
            parts = candidate.split(":")
            hour = parts[0].zfill(2)
            minute = parts[1]
            sub_time = f"{hour}:{minute}"
        else:
            bot.send_message(chat_id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 22:00.")
            return
    role, username, _, last_sent = get_user_data(chat_id)
    if not role:
        role = "–û—Ñ—ñ—Å"
        if not username:
            username = message.from_user.username or ""
    update_user_data(chat_id, role, username, sub_time, last_sent)
    bot.send_message(chat_id, f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ {sub_time}.")

@bot.message_handler(commands=["unsubscribe"])
def cmd_unsubscribe(message):
    chat_id = str(message.chat.id)
    role, username, report_time, last_sent = get_user_data(chat_id)
    if not role:
        bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–æ–ª—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start")
        return
    update_user_data(chat_id, role, username, "", last_sent)
    bot.send_message(chat_id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")

@bot.message_handler(content_types=["photo"])
def handle_barcode_image(message):
    chat_id = str(message.chat.id)
    role, username, report_time, last_sent = get_user_data(chat_id)
    if not role:
        bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–æ–ª—å: /Office –∞–±–æ /Cklad")
        return
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    np_arr = np.frombuffer(downloaded_file, np.uint8)
    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    try:
        barcodes = decode(img)
        if not barcodes:
            bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∏!")
            return
        success_count = 0
        error_count = 0
        for barcode in barcodes:
            try:
                ttn_raw = barcode.data.decode("utf-8")
                digits = re.sub(r"\D", "", ttn_raw)
                if not digits or not (8 <= len(digits) <= 18):
                    continue
                handle_ttn_logic(chat_id, digits, username)
                success_count += 1
            except Exception as inner_e:
                error_count += 1
        bot.send_message(chat_id, f"–û–±—Ä–æ–±–ª–µ–Ω–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—ñ–≤: —É—Å–ø—ñ—à–Ω–æ: {success_count}, –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {error_count}")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
        print(e)

@bot.message_handler(func=lambda m: True)
def handle_text_message(message):
    if message.text.startswith("/"):
        return
    chat_id = str(message.chat.id)
    digits = re.sub(r"\D", "", message.text)
    if digits and 8 <= len(digits) <= 18:
        role, username, report_time, last_sent = get_user_data(chat_id)
        if not role:
            bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–æ–ª—å: /Office –∞–±–æ /Cklad")
            return
        handle_ttn_logic(chat_id, digits, username)

def handle_ttn_logic(chat_id, ttn, username):
    role, usern, report_time, last_sent = get_user_data(chat_id)
    if role == "–°–∫–ª–∞–¥":
        add_ttn_to_sheet(ttn, username, chat_id)
    elif role == "–û—Ñ—ñ—Å":
        check_ttn_in_sheet(chat_id, ttn)
    else:
        bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–æ–ª—å: /Office –∞–±–æ /Cklad")

# ======= –†–æ–∑—Å–∏–ª–∫–∞ –∑–≤—ñ—Ç—ñ–≤ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º =======

def send_subscription_notifications():
    tz = pytz.timezone("Europe/Kiev")
    now = datetime.now(tz)
    current_time_str = now.strftime("%H:%M")
    today_str = now.strftime("%Y-%m-%d")
    all_users = get_all_users_data()
    for chat_id, info in all_users.items():
        report_time = info.get("time", "")
        if not report_time:
            continue
        if current_time_str == report_time:
            last_sent = info.get("last_sent", "")
            if last_sent != today_str:
                try:
                    col_a = worksheet_ttn.col_values(1)[1:]
                    count_ttn = sum(1 for x in col_a if x.strip() != "")
                except Exception:
                    count_ttn = "–ù–µ–≤—ñ–¥–æ–º–æ (–ø–æ–º–∏–ª–∫–∞)"
                bot.send_message(chat_id, f"–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¢–¢–ù: {count_ttn}")
                role, username, report_time, _ = get_user_data(chat_id)
                update_user_data(chat_id, role, username, report_time, today_str)

# ======= –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ (schedule) =======

def run_scheduler():
    schedule.every().minute.do(send_subscription_notifications)
    schedule.every().minute.do(run_clear_ttn_sheet_with_tz)
    while True:
        schedule.run_pending()
        time.sleep(30)

# ======= –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –∑–∞–ø—É—Å–∫ Flask, –±–æ—Ç–∞ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ =======

def main():
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    bot_thread = threading.Thread(target=bot.polling, daemon=True)
    bot_thread.start()
    try:
        run_scheduler()
    except KeyboardInterrupt:
        print("Shutting down gracefully (KeyboardInterrupt).")
        import sys
        sys.exit(0)

if __name__ == "__main__":
    main()
