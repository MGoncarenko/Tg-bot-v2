import os
import json
import re
import threading
import time
from datetime import datetime, timedelta

import telebot
import gspread
import cv2
import numpy as np
from pyzbar.pyzbar import decode
from oauth2client.service_account import ServiceAccountCredentials
import schedule
import pytz
from flask import Flask

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (—Ü–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å API –∫–ª—é—á—ñ —ñ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó)
from config import TOKEN, GOOGLE_SHEETS_CREDENTIALS, GOOGLE_SHEET_URL

#####################
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask
#####################
app = Flask(__name__)

@app.route('/')
def ping():
    return "OK", 200

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

#####################
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
#####################

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_CREDENTIALS, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(GOOGLE_SHEET_URL)
worksheet = sheet.sheet1  # –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞ sheet.worksheet("–ù–∞–∑–≤–∞–í–∫–ª–∞–¥–∫–∏")

bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö (user_roles —Ç–∞ subscriptions)
USER_ROLES_FILE = "user_roles.json"
SUBSCRIPTIONS_FILE = "subscriptions.json"

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ user_roles.json
def load_user_roles():
    try:
        with open(USER_ROLES_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_user_roles(user_roles):
    with open(USER_ROLES_FILE, "w", encoding="utf-8") as file:
        json.dump(user_roles, file, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ subscriptions.json
def load_subscriptions():
    try:
        with open(SUBSCRIPTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_subscriptions(subs):
    with open(SUBSCRIPTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(subs, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ (—à—Ç—Ä–∏—Ö-–∫–æ–¥—ñ–≤)
def log_barcode_error(user_nickname, error_message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("barcode_error_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{timestamp} - {user_nickname}: {error_message}\n")

#####################
# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
#####################

# /start ‚Äì –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é —â–æ–¥–æ –ø—ñ–¥–ø–∏—Å–∫–∏
@bot.message_handler(commands=["start"])
def send_welcome(message):
    chat_id = str(message.chat.id)
    user_roles = load_user_roles()
    subscribe_info = ("\n\n–í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç, "
                      "–≤–≤—ñ–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /subscribe <—á–∞—Å> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /subscribe 22:00). "
                      "–Ø–∫—â–æ —á–∞—Å –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äì –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 22:00. "
                      "–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è ‚Äì –∫–æ–º–∞–Ω–¥–æ—é /unsubscribe.")
    if chat_id in user_roles:
        role = user_roles[chat_id]["role"]
        bot.send_message(
            chat_id,
            f"üëã –í—ñ—Ç–∞—é! –í–∞—à–∞ —Ä–æ–ª—å: *{role}*.\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é:\n"
            "/Office - –û—Ñ—ñ—Å üìë\n"
            "/Cklad - –°–∫–ª–∞–¥ üì¶"
            f"{subscribe_info}",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(
            chat_id,
            "–¶–µ–π –±–æ—Ç —Å–ø—Ä–æ—â—É—î —Ä–æ–±–æ—Ç—É –∑ –¢–¢–ù.\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å:\n"
            "/Office - –û—Ñ—ñ—Å üìë\n"
            "/Cklad - –°–∫–ª–∞–¥ üì¶"
            f"{subscribe_info}"
        )

# –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ
@bot.message_handler(commands=["Office"])
def set_office_role(message):
    chat_id = str(message.chat.id)
    user_roles = load_user_roles()
    user_roles[chat_id] = {
        "role": "–û—Ñ—ñ—Å",
        "username": message.from_user.username
    }
    save_user_roles(user_roles)
    bot.send_message(chat_id, "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–ª—å: *–û—Ñ—ñ—Å*\n\n–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –¢–¢–ù (–∫–æ–¥ –∞–±–æ —Ñ–æ—Ç–æ), –≤–æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç—å—Å—è.", parse_mode="Markdown")

@bot.message_handler(commands=["Cklad"])
def set_cklad_role(message):
    chat_id = str(message.chat.id)
    user_roles = load_user_roles()
    user_roles[chat_id] = {
        "role": "–°–∫–ª–∞–¥",
        "username": message.from_user.username
    }
    save_user_roles(user_roles)
    bot.send_message(chat_id, "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ —Ä–æ–ª—å: *–°–∫–ª–∞–¥*\n\n–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –¢–¢–ù (–∫–æ–¥ –∞–±–æ —Ñ–æ—Ç–æ), –≤–æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç—å—Å—è.", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –ø—ñ–¥–ø–∏—Å–∫–∏. –§–æ—Ä–º–∞—Ç: /subscribe –∞–±–æ /subscribe 22:00
@bot.message_handler(commands=["subscribe"])
def subscribe(message):
    chat_id = str(message.chat.id)
    args = message.text.split()
    sub_time = "22:00"  # —á–∞—Å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if len(args) > 1:
        candidate = args[1]
        if re.match(r'^\d{1,2}:\d{2}$', candidate):
            parts = candidate.split(":")
            hour = parts[0].zfill(2)
            minute = parts[1]
            sub_time = f"{hour}:{minute}"
        else:
            bot.send_message(chat_id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 22:00.")
            return
    subs = load_subscriptions()
    subs[chat_id] = {
         "time": sub_time,
         "username": message.from_user.username,
         "last_sent": ""
    }
    save_subscriptions(subs)
    bot.send_message(chat_id, f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ {sub_time}.")

# –ö–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–ø–∏—Å–∫–∏
@bot.message_handler(commands=["unsubscribe"])
def unsubscribe(message):
    chat_id = str(message.chat.id)
    subs = load_subscriptions()
    if chat_id in subs:
         del subs[chat_id]
         save_subscriptions(subs)
         bot.send_message(chat_id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
    else:
         bot.send_message(chat_id, "–í–∏ –Ω–µ –±—É–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.")

# –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ ‚Äì –∑—á–∏—Ç—É—é—Ç—å—Å—è –≤—Å—ñ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∏
@bot.message_handler(content_types=["photo"])
def handle_barcode_image(message):
    chat_id = str(message.chat.id)
    user_roles = load_user_roles()
    if chat_id not in user_roles:
        bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å: /Office –∞–±–æ /Cklad")
        return

    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    np_arr = np.frombuffer(downloaded_file, np.uint8)
    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

    try:
        barcodes = decode(img)
        if not barcodes:
            bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∏!")
            return

        success_count = 0
        error_count = 0
        for barcode in barcodes:
            try:
                ttn_raw = barcode.data.decode("utf-8")
                digits = re.sub(r"\D", "", ttn_raw)
                if not digits or not (8 <= len(digits) <= 18):
                    continue
                handle_ttn_logic(chat_id, digits, message.from_user.username)
                success_count += 1
            except Exception as inner_e:
                user_nickname = message.from_user.username or str(message.chat.id)
                log_barcode_error(user_nickname, f"–û–±—Ä–æ–±–∫–∞ –∫–æ–¥—É {ttn_raw if 'ttn_raw' in locals() else 'Unknown'}: {inner_e}")
                error_count += 1

        bot.send_message(chat_id, f"–û–±—Ä–æ–±–ª–µ–Ω–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—ñ–≤: —É—Å–ø—ñ—à–Ω–æ: {success_count}, –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {error_count}")
    except Exception as e:
        user_nickname = message.from_user.username or str(message.chat.id)
        log_barcode_error(user_nickname, str(e))
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –¢–¢–ù)
@bot.message_handler(func=lambda message: True)
def handle_text_message(message):
    if message.text.startswith("/"):
        return
    chat_id = str(message.chat.id)
    digits = re.sub(r"\D", "", message.text)
    if digits and 8 <= len(digits) <= 18:
        handle_ttn_logic(chat_id, digits, message.from_user.username)

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¢–¢–ù –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def handle_ttn_logic(chat_id, ttn, username):
    user_roles = load_user_roles()
    if chat_id not in user_roles:
        bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å: /Office –∞–±–æ /Cklad")
        return
    role = user_roles[chat_id]["role"]
    if role == "–°–∫–ª–∞–¥":
        add_ttn_to_sheet(ttn, username, chat_id)
    elif role == "–û—Ñ—ñ—Å":
        check_ttn_in_sheet(chat_id, ttn)

# –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¢–¢–ù —É –±–ª–æ–∫ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è (–∫–æ–ª–æ–Ω–∫–∏ A, B, C)
def add_ttn_to_sheet(ttn, username, chat_id):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ A1 –º—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∞ –¢–¢–ù –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è –∑ A2
        col_a = worksheet.col_values(1)
        next_row = len(col_a) + 1
        worksheet.update(f"A{next_row}:C{next_row}", [[ttn, now, username]])
        bot.send_message(chat_id, f"‚úÖ –¢–¢–ù `{ttn}` –¥–æ–¥–∞–Ω–æ!", parse_mode="Markdown")
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –¢–¢–ù –¥–æ —Ç–∞–±–ª–∏—Ü—ñ!")
        user_nickname = username or str(chat_id)
        log_barcode_error(user_nickname, f"append_row error: {e}")

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¢–¢–ù –ø–æ –≤—Å—ñ—Ö –±–ª–æ–∫–∞—Ö (TT–ù –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ A, E, I, M, Q, U)
def check_ttn_in_sheet(chat_id, ttn):
    try:
        ttn_block1 = worksheet.col_values(1)[1:]   # –±–ª–æ–∫ 1 (A)
        ttn_block2 = worksheet.col_values(5)[1:]   # –±–ª–æ–∫ 2 (E)
        ttn_block3 = worksheet.col_values(9)[1:]   # –±–ª–æ–∫ 3 (I)
        ttn_block4 = worksheet.col_values(13)[1:]  # –±–ª–æ–∫ 4 (M)
        ttn_block5 = worksheet.col_values(17)[1:]  # –±–ª–æ–∫ 5 (Q)
        ttn_block6 = worksheet.col_values(21)[1:]  # –±–ª–æ–∫ 6 (U)
    except Exception as e:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏!")
        return

    all_ttns = ttn_block1 + ttn_block2 + ttn_block3 + ttn_block4 + ttn_block5 + ttn_block6
    if ttn in all_ttns:
        records = worksheet.get_all_values()
        found = False
        for row in records[1:]:
            if ttn in row:
                idx = row.index(ttn)
                date_time = row[idx + 1] if idx + 1 < len(row) else "–Ω–µ–≤—ñ–¥–æ–º–æ"
                bot.send_message(chat_id, f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–æ! –¢–¢–ù: `{ttn}`\nüïí –ß–∞—Å: {date_time}", parse_mode="Markdown")
                found = True
                break
        if not found:
            bot.send_message(chat_id, f"‚ùå –¢–¢–ù `{ttn}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ!", parse_mode="Markdown")
    else:
        bot.send_message(chat_id, f"‚ùå –¢–¢–ù `{ttn}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ!", parse_mode="Markdown")

# –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ—â–µ–Ω–Ω—è –±–ª–æ–∫—ñ–≤ (6 –±–ª–æ–∫—ñ–≤ –ø–æ 3 –∫–æ–ª–æ–Ω–∫–∏)
def shift_table():
    """
    –ó—Å—É–≤–∞—î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ:
      - –ë–ª–æ–∫ 6 (U-V-W) ‚Üê –±–ª–æ–∫ 5 (Q-R-S)
      - –ë–ª–æ–∫ 5 (Q-R-S) ‚Üê –±–ª–æ–∫ 4 (M-N-O)
      - –ë–ª–æ–∫ 4 (M-N-O) ‚Üê –±–ª–æ–∫ 3 (I-J-K)
      - –ë–ª–æ–∫ 3 (I-J-K) ‚Üê –±–ª–æ–∫ 2 (E-F-G)
      - –ë–ª–æ–∫ 2 (E-F-G) ‚Üê –±–ª–æ–∫ 1 (A-B-C)
      - –ë–ª–æ–∫ 1 (A-B-C) –æ—á–∏—â–∞—î—Ç—å—Å—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ A1, E1, I1, M1, Q1, U1 —ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏.
    """
    try:
        block1_data = worksheet.get_values("A2:C")
        block2_data = worksheet.get_values("E2:G")
        block3_data = worksheet.get_values("I2:K")
        block4_data = worksheet.get_values("M2:O")
        block5_data = worksheet.get_values("Q2:S")
        worksheet.update("U2", block5_data)   # –±–ª–æ–∫ 5 ‚Üí –±–ª–æ–∫ 6
        worksheet.update("Q2", block4_data)   # –±–ª–æ–∫ 4 ‚Üí –±–ª–æ–∫ 5
        worksheet.update("M2", block3_data)   # –±–ª–æ–∫ 3 ‚Üí –±–ª–æ–∫ 4
        worksheet.update("I2", block2_data)   # –±–ª–æ–∫ 2 ‚Üí –±–ª–æ–∫ 3
        worksheet.update("E2", block1_data)   # –±–ª–æ–∫ 1 ‚Üí –±–ª–æ–∫ 2
        # –û—á–∏—â–µ–Ω–Ω—è –±–ª–æ–∫—É 1 –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        row_count = len(block1_data)
        if row_count > 0:
            empty_data = [[""] * 3 for _ in range(row_count)]
            worksheet.update("A2", empty_data)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —ñ–∑ –¥–∞—Ç–∞–º–∏
        tz_kiev = pytz.timezone("Europe/Kiev")
        now_kiev = datetime.now(tz_kiev)
        dates = [
            now_kiev.date(),                           # –±–ª–æ–∫ 1 ‚Äì –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å
            now_kiev.date() - timedelta(days=1),         # –±–ª–æ–∫ 2
            now_kiev.date() - timedelta(days=2),         # –±–ª–æ–∫ 3
            now_kiev.date() - timedelta(days=3),         # –±–ª–æ–∫ 4
            now_kiev.date() - timedelta(days=4),         # –±–ª–æ–∫ 5
            now_kiev.date() - timedelta(days=5)          # –±–ª–æ–∫ 6
        ]
        worksheet.update("A1", [[str(dates[0])]])
        worksheet.update("E1", [[str(dates[1])]])
        worksheet.update("I1", [[str(dates[2])]])
        worksheet.update("M1", [[str(dates[3])]])
        worksheet.update("Q1", [[str(dates[4])]])
        worksheet.update("U1", [[str(dates[5])]])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—Å—É–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ: {e}")

def run_shift_table_with_tz():
    tz_kiev = pytz.timezone("Europe/Kiev")
    now_kiev = datetime.now(tz_kiev)
    if now_kiev.strftime("%H:%M") == "00:00":
        shift_table()

# –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º (—Ä–∞—Ö—É—î–º–æ –¢–¢–ù –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å —ñ–∑ –±–ª–æ–∫—É 1, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ A3)
def send_subscription_notifications():
    tz_kiev = pytz.timezone("Europe/Kiev")
    now = datetime.now(tz_kiev)
    current_time_str = now.strftime("%H:%M")
    today_str = now.strftime("%Y-%m-%d")
    subs = load_subscriptions()
    for chat_id, data in subs.items():
        sub_time = data.get("time", "22:00")
        last_sent = data.get("last_sent", "")
        if current_time_str == sub_time and last_sent != today_str:
            try:
                # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ –∫–æ–ª–æ–Ω–∫–∏ A, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —Ç—Ä–µ—Ç—å–æ–≥–æ —Ä—è–¥–∫–∞ (A3 —ñ –¥–∞–ª—ñ)
                col_a = worksheet.col_values(1)[2:]
                count_ttn = sum(1 for x in col_a if x.strip() != "")
            except Exception as e:
                count_ttn = "–ù–µ–≤—ñ–¥–æ–º–æ (–ø–æ–º–∏–ª–∫–∞)"
            bot.send_message(chat_id, f"–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¢–¢–ù: {count_ttn}")
            subs[chat_id]["last_sent"] = today_str
    save_subscriptions(subs)

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É —Ç–∞ –∑—Å—É–≤ —Ç–∞–±–ª–∏—Ü—ñ –æ 00:00
def run_scheduler():
    schedule.every().minute.do(send_subscription_notifications)
    schedule.every().day.at("00:00").do(run_shift_table_with_tz)
    while True:
        schedule.run_pending()
        time.sleep(30)

#####################
# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
#####################
def main():
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è (–¥–ª—è UptimeRobot)
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    bot_thread = threading.Thread(target=bot.polling, daemon=True)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ –∑ –æ–±—Ä–æ–±–∫–æ—é KeyboardInterrupt
    try:
        run_scheduler()
    except KeyboardInterrupt:
        print("Shutting down gracefully (KeyboardInterrupt).")
        import sys
        sys.exit(0)

if __name__ == "__main__":
    main()
